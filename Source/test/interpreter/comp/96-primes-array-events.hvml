#!/usr/bin/purc

# RESULT: 10UL

<!-- The expected output of this HVML program should be like

-->

<!DOCTYPE hvml>
<hvml target="void">

    <body id="main">
        <update on $RUNNER.myObj to "merge" with { 'primes': [], 'exitFlag':false } />

        <init as 'nrPrimes' with 10L />
        <iterate on 0 onlyif $L.lt($0<, $nrPrimes) with $DATA.arith('+', $0<, 1) nosetotail >
            <init as channelIdx with "$?" />
            <init as inChannel with "channel$?" />
            <update on $RUNNER.myObj at ".$inChannel" with [] />
            <observe on $RUNNER.myObj[$inChannel] for "change:inflated" >
                $channelIdx

                <update on $RUNNER.myObj.primes to "append" with $_observedOn[-1] />
                <forget on $_observedOn for 'change:inflated' />

                <load from "#sieve" with {'idx': $_observedContent, 'prime': $RUNNER.myObj.primes[-1] } as 'sieve' async />
            </observe>
        </iterate>

        <observe on $RUNNER.myObj.primes for "change:inflated" >
            <inherit>
                $STREAM.stdout.writelines("#####prime : $DATA.serialize($RUNNER.myObj.primes)")
            </inherit>
            <test with $L.ge($DATA.count($RUNNER.myObj.primes), $nrPrimes)>
                <update on $RUNNER.myObj at ".exitFlag" with true />
                <exit with $DATA.count($RUNNER.myObj.primes) />
            </test>
        </observe>

        <load from "#first" with { 'maxn': 1000UL } async />
    </body>

    <body id="first">
        <iterate on 2 onlyif $L.lt($0<, $REQ.maxn) with $DATA.arith('+', $0<, 1) nosetotail >
            <update on $RUNNER.myObj.channel0 to append with $? />
            <sleep for '500ms' />
            <test with $RUNNER.myObj.exitFlag >
                <exit with true />
            </test>
        </iterate>
    </body>

    <body id="sieve">
        <init as inChannel with "channel$REQ.idx" />
        <init as outChannel with "channel$DATA.arith('+', $REQ.idx, 1)" />

        <update on="$TIMERS" to="displace">
            [
                { "id" : $inChannel, "interval" : 1000, "active" : "yes" },
            ]
        </update>

        <observe on="$TIMERS" for="expired:$inChannel">
            <test with $RUNNER.myObj.exitFlag >
                <exit with true />
            </test>
        </observe>

        <observe on $RUNNER.myObj[$inChannel] for "change:inflated" >
            <test with $DATA.arith('%', $RUNNER.myObj[$inChannel][-1], $REQ.prime) >
                <update on $RUNNER.myObj[$outChannel] to "append" with $RUNNER.myObj[$inChannel][-1] />
            </test>
        </observe>
    </body>
</hvml>

