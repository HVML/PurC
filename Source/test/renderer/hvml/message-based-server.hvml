#!/usr/bin/purc

# RESULT: 'Good Client'

<hvml target="void">
    <head>
        <base href=$CRTN.base(! "file://$REQ.base" ) hvml:silently />
    </head>

    <body id='server' >

        <define as 'mainFuncs' from 'controller/main.hvml' />
        <include with $mainFuncs />

        <include with $logMsg on 'The server is running...' />

        <init as 'msgSettings' >
            {
                'noresptimetoping': 3,
                'noresptimetoclose': 6,
            }
        </init>

        <include with $logMsg on $DATA.serialize($msgSettings) />

        <init as 'clients' with {} />

        <init as 'srvListenSocket' with $SOCKET.stream('local:///var/tmp/hvml-test-renderer.sock', 'none', 32) >
            <catch for `ANY`>
                <exit with "Server failed with $?.name when calling SOCKET.stream()" />
            </catch>
        </init>

        <include with $logMsg on 'The server is accepting...' />

        <observe on $CRTN for 'idle'>
            <include with $logMsg on 'The server is idle...' />
        </observe>

        <observe on $srvListenSocket for 'socket:connAttempt'>
            <choose on $srvListenSocket.accept('default', 'message', $msgSettings)>
                <catch for `ANY`>
                    <exit with "Server failed with $?.name when calling accept()" />
                </catch>

                <test with $L.not($DATA.isequal($?, null)) >

                    <include with $logMsg on "Server accpeted a client from $?.peerAddr:$?.peerPort" />

                    <init as 'clientId' with "$?.peerAddr:$?.peerPort" temp />

                    <update on $clients to 'merge' with { $clientId : $? } />

                    <!-- send initial response to the client -->
                    <call on $sendResponse with {requestId: '0', resultValue: 0} >
                        {
                            requestId : '0',
                            retCode: 200,
                            resultValue: 0,
                            dataType: 'void',
                        }
                    </call>

                    <observe on $clients[$clientId] for 'message'>
                        $clientId

                        <!-- TODO: handle message here -->
                        <call on $parseMessage with { message : $? } >
                        </call>

                    </observe>

                    <observe on $clients[$clientId] for 'error'>
                        $clientId

                        <include with $logMsg on "Server got ERROR event from `$_observedContent`; payload:" />
                        <include with $logMsg on $DATA.serialize($?) />

                        <update on $clients at ".$_observedContent" to 'remove' />
                        <forget on $_observedOn for '*' />
                    </observe>

                    <observe on $clients[$clientId] for 'close'>
                        $clientId

                        <include with $logMsg on "Server got CLOSE event from `$_observedContent`; payload:" />
                        <include with $logMsg on $DATA.serialize($?) />

                        <update on $clients at ".$_observedContent" to 'remove' />
                        <forget on $_observedOn for '*' />
                    </observe>

                </test>
            </choose>
        </observe>

    </body>

</hvml>

