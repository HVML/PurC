# test cases for methods implemented 0.9.22+ of $STR and $DATA
positive:
    $L.gt($DATA.memsize, 0)
    true

positive:
    $L.eq($DATA.memsize, $DATA.memsize(null))
    true

positive:
    $L.gt($DATA.memsize([]), $DATA.memsize(null))
    true

positive:
    $L.ge($DATA.memsize({}), $DATA.memsize(3))
    true

positive:
    $L.ge($DATA.memsize([{}]), $DATA.memsize([]))
    true

positive:
    $L.ge($DATA.memsize({'a': []}), $DATA.memsize({}))
    true

positive:
    $L.gt($DATA.memsize('this is a very long text; this is a very long text; this is a very long text'), $DATA.memsize('a short text'))
    true

negative:
    $DATA.makebytesbuffer()
    ArgumentMissed

negative:
    $DATA.makebytesbuffer(null)
    WrongDataType

positive:
    $DATA.type($DATA.makebytesbuffer(1024))
    'bsequence'

negative:
    $DATA.append2bytesbuffer()
    ArgumentMissed

negative:
    $DATA.append2bytesbuffer(null)
    ArgumentMissed

negative:
    $DATA.append2bytesbuffer(null, null)
    WrongDataType

negative:
    $DATA.append2bytesbuffer(bx1122, null)
    WrongDataType

negative:
    $DATA.append2bytesbuffer(bx1122, bx00, 'foo', null, null)
    InvalidValue

negative:
    $DATA.append2bytesbuffer(bx1122, bx00, 'all', 0, null)
    WrongDataType

negative:
    $DATA.append2bytesbuffer(bx1122, bx00, 'all', 0, 2)
    InvalidValue

positive:
    $DATA.append2bytesbuffer(bx1122, bx00, 'all')
    1UL

positive:
    $DATA.append2bytesbuffer(bx1122, '', 'utf8-chars', 0, 0)
    0UL

negative:
    $DATA.append2bytesbuffer(bx, '中华人民共和国万岁万岁万万岁，中国人民万岁万万岁！', 'all', 0, 0)
    TooLong

negative:
    $DATA.append2bytesbuffer(bx, '中华人民共和国万岁万岁万万岁，中国人民万岁万万岁！')
    TooLong

positive:
    $RUNNER.user!( "myBuffer", $DATA.makebytesbuffer(40) )
    true

positive:
    $DATA.append2bytesbuffer($RUNNER.myObj.myBuffer, bxE4B8ADE58D8EE4BABAE6B091E585B1E5928CE59BBD, 'utf8-chars', 0, 0)
    21UL

negative:
    $DATA.append2bytesbuffer($RUNNER.myObj.myBuffer, bxE4B8ADE58D8EE4BABAE6B091E585B1E5928CE59BBDE4B8ADE58D8EE4BABAE6B091E585B1E5928CE59BBD, 'all', 0, 0)
    TooLong

negative:
    $DATA.append2bytesbuffer($RUNNER.myObj.myBuffer, bxE4B8ADE58D8EE4BABAE6B091E585B1E5928CE59BBDE4B8ADE58D8EE4BABAE6B091E585B1E5928CE59BBD)
    TooLong

positive:
    $DATA.append2bytesbuffer($RUNNER.myObj.myBuffer, bxE4B8ADE58D8EE4BABAE6B091E585B1E5928CE5, 'utf8-chars')
    18UL

positive:
    $DATA.unpack("utf8", $RUNNER.myObj.myBuffer)
    '中华人民共和国中华人民共和'

negative:
    $DATA.rollbytesbuffer()
    ArgumentMissed

negative:
    $DATA.rollbytesbuffer(null)
    WrongDataType

negative:
    $DATA.rollbytesbuffer(bx)
    InvalidValue

positive:
    $DATA.rollbytesbuffer($RUNNER.myObj.myBuffer, -1)
    0UL

positive:
    $RUNNER.myObj.myBuffer
    bx

positive:
    $DATA.append2bytesbuffer($RUNNER.myObj.myBuffer, bx0011223344)
    5UL

negative:
    $DATA.rollbytesbuffer($RUNNER.myObj.myBuffer, 6)
    InvalidValue

positive:
    $DATA.rollbytesbuffer($RUNNER.myObj.myBuffer, 1)
    4UL

positive:
    $RUNNER.myObj.myBuffer
    bx11223344

negative:
    $RUNNER.enablelog()
    ArgumentMissed

negative:
    $RUNNER.enablelog(null)
    WrongDataType

negative:
    $RUNNER.enablelog('all', null)
    WrongDataType

negative:
    $RUNNER.enablelog('foo', 'stderr')
    InvalidValue

negative:
    $RUNNER.enablelog('all', 'foo')
    InvalidValue

negative:
    $RUNNER.logmsg
    ArgumentMissed

negative:
    $RUNNER.logmsg(null)
    WrongDataType

negative:
    $RUNNER.logmsg('A log message', null)
    WrongDataType

negative:
    $RUNNER.logmsg('A log message', 'foo')
    InvalidValue

positive:
    $RUNNER.enablelog('emerg error')
    true

positive:
    $RUNNER.logmsg('This is a log message (info level); you will not see this log message.')
    true

positive:
    $RUNNER.logmsg('This is a log message (error level)', 'error')
    true

positive:
    $RUNNER.enablelog('all')
    true

positive:
    $RUNNER.logmsg('This is a log message (info level).')
    true

negative:
    $STR.explode()
    ArgumentMissed

negative:
    $STR.explode(null)
    WrongDataType

positive:
    $STR.explode('')
    []

positive:
    $STR.explode('beijing\n \nshanghai:guangzhou', '\n \n', 2)
    ['beijing', 'shanghai:guangzhou']

positive:
    $STR.explode('beijing:shanghai:guangzhou', ':')
    ['beijing', 'shanghai', 'guangzhou']

positive:
    $STR.explode('1, 2, 3, ', ', ')
    ['1', '2', '3', '']

positive:
    $STR.explode('汉字')
    ['汉', '字']

positive:
    $STR.explode('中华人民共和国', '', 2)
    ['中', '华人民共和国']

positive:
    $STR.explode('中华人民共和国', '', -5)
    ['中', '华']

positive:
    $STR.explode(', , , ', ', ')
    ['', '', '', '']

positive:
    $STR.explode('汉字', '\n\n')
    ['汉字']

positive:
    $STR.explode('汉\n\n字', '\n\n')
    ['汉', '字']

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', 4)
    ['中华', '人民', '共和国']

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', 3)
    ['中华', '人民', '共和国']

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', 2)
    ['中华', '人民\n\n共和国']

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', -2)
    ['中华']

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', -3)
    []

positive:
    $STR.explode('中华\n\n人民\n\n共和国', '\n\n', -4)
    []

positive:
    $STR.explode(';aaa;;bbb;', ';')
    ['', 'aaa', '', 'bbb', '']

negative:
    $STR.implode()
    ArgumentMissed

negative:
    $STR.implode(null)
    WrongDataType

negative:
    $STR.implode([], null)
    WrongDataType

positive:
    $STR.implode([])
    ''

positive:
    $STR.implode(['beijing', 'shanghai', 'guangzhou'], ', ')
    'beijing, shanghai, guangzhou'

positive:
    $STR.implode([1, 2, 3, ''], ', ')
    '1, 2, 3, '

positive:
    $STR.implode(["root", 'x', 0, 0, 'root', "/root", "/bin/bash"], ':')
    'root:x:0:0:root:/root:/bin/bash'

positive:
    $STR.implode(['汉', '字'])
    '汉字'

negative:
    $STR.trim()
    ArgumentMissed

negative:
    $STR.trim(null)
    WrongDataType

negative:
    $STR.trim('', null)
    WrongDataType

negative:
    $STR.trim('', null, null)
    WrongDataType

negative:
    $STR.trim('', '', '')
    InvalidValue

negative:
    $STR.trim('', 'foo', '')
    InvalidValue

positive:
    $STR.trim('', 'left', '')
    ''

positive:
    $STR.trim('', 'both', '')
    ''

positive:
    $STR.trim('\n foo bar \t')
    'foo bar'

positive:
    $STR.trim('\n foo bar \t', 'left')
    'foo bar \t'

positive:
    $STR.trim('\n foo bar \t', 'right')
    '\n foo bar'

positive:
    $STR.trim('张三李四', 'left', '张李')
    '三李四'

positive:
    $STR.trim('张三李四', 'right', '张李')
    '张三李四'

positive:
    $STR.trim(' 张三李四 ', 'both', ' 张四')
    '三李'

negative:
    $STR.replace(null)
    ArgumentMissed

negative:
    $STR.replace(null, null, null)
    WrongDataType

negative:
    $STR.replace('美国、英国', ['美国', null], ['中国'])
    WrongDataType

negative:
    $STR.replace('美国、英国', ['美国', ''], ['中国'])
    InvalidValue

positive:
    $STR.replace('tom, TOM, ToM, and Jerry', 'TOM', 'Tom', true)
    'Tom, Tom, Tom, and Jerry'

positive:
    $STR.replace(['tom and Jerray', 'TOM and Amy'], 'TOM', 'Tom', true)
    ['Tom and Jerray', 'Tom and Amy']

positive:
    $STR.replace('Amy, TOM, ToM, and Jerry', 'TOM', 'Tom', true)
    'Amy, Tom, Tom, and Jerry'

positive:
    $STR.replace('美国、英国', ['美国', '英国'], ['中国', '中国'])
    '中国、中国'

positive:
    $STR.replace('美国、英国', ['美国', '英国'], ['中国'])
    '中国、'

positive:
    $STR.replace('Hello World of HVML', ["a", "e", "i", "o", "u", "A", "E", "I", "O", "U"], '')
    'Hll Wrld f HVML'

positive:
    $STR.replace('You should eat fruits, vegetables, and fiber every day.', ['should', "fruits", "vegetables", "fiber"], ['should not', "pizza", "beer", "ice cream"])
    'You should not eat pizza, beer, and ice cream every day.'

positive:
    $STR.replace('A', ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D', 'E', 'F'])
    'F'

positive:
    $DATA.is_container
    false

positive:
    $DATA.is_container(bx00)
    false

positive:
    $DATA.is_container([])
    true

positive:
    $DATA.is_container([!])
    true

positive:
    $DATA.is_container({})
    true

positive:
    $DATA.is_linear_container
    false

positive:
    $DATA.is_linear_container(bx00)
    false

positive:
    $DATA.is_linear_container([])
    true

positive:
    $DATA.is_linear_container([!])
    true

positive:
    $DATA.is_linear_container({})
    false

positive:
    $DATA.numerify('00123')
    123

negative:
    $STR.codepoints()
    ArgumentMissed

negative:
    $STR.codepoints(null)
    WrongDataType

negative:
    $STR.codepoints('', 'foo')
    InvalidValue

positive:
    $STR.codepoints('')
    []

positive:
    $STR.codepoints('', 'tuple')
    [!]

positive:
    $STR.codepoints('HVML的昵称是呼噜猫')
    [ 72, 86, 77, 76, 30340, 26165, 31216, 26159, 21628, 22108, 29483 ]

positive:
    $STR.codepoints('HVML的昵称是呼噜猫', 'tuple')
    [! 72, 86, 77, 76, 30340, 26165, 31216, 26159, 21628, 22108, 29483 ]

negative:
    $STR.codepoints!()
    ArgumentMissed

negative:
    $STR.codepoints!( null )
    WrongDataType

positive:
    $STR.codepoints!( [])
    ''

positive:
    $STR.codepoints!( [!])
    ''

positive:
    $STR.codepoints!( [72, 86, 77, 76])
    'HVML'

positive:
    $STR.codepoints!( [! 20013, 22269 ] )
    '中国'

positive:
    $STR.codepoints!( [ 0x4E2D, 0x56FD ])
    '中国'

positive:
    $STR.codepoints!( [0x4E2D, 0x200000])
    '中'

positive:
    $STR.codepoints!( ['', 0x200000])
    ''

negative:
    $STR.count_bytes()
    ArgumentMissed

negative:
    $STR.count_bytes(null)
    WrongDataType

negative:
    $STR.count_bytes('', 'foo')
    InvalidValue

positive:
    $STR.count_bytes('')
    [!1UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL]

positive:
    $STR.count_bytes(bx0001, 'tuple-all')
    [!1UL,1UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL,0UL]

positive:
    $STR.count_bytes('', 'bytes-appeared')
    bx00

positive:
    $STR.count_bytes(bx02, 'bytes-appeared')
    bx02

positive:
    $STR.count_bytes(bx02, 'object-all')['0']
    0UL

positive:
    $STR.count_bytes(bx02, 'object-all')['2']
    1UL

positive:
    $STR.count_bytes(bx02, 'object-appeared')
    { '2': 1UL }

positive:
    $STR.count_bytes(bx02, 'object-appeared')['3']
    undefined

positive:
    $STR.count_bytes(bx02, 'object-not-appeared')['1']
    0UL

positive:
    $STR.count_bytes(bx02, 'object-not-appeared')['2']
    undefined

positive:
    $STR.count_bytes(bx2302, 'bytes-appeared')
    bx0223

positive:
    $STR.count_bytes(bx000102030405060708090A0B0C0D0E0F, 'bytes-not-appeared')
    bx101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF

negative:
    $STR.count_chars()
    ArgumentMissed

negative:
    $STR.count_chars(null)
    WrongDataType

negative:
    $STR.count_chars('', 'foo')
    InvalidValue

positive:
    $STR.count_chars('', 'object')
    {}

positive:
    $STR.count_chars('', 'string')
    ''

positive:
    $STR.count_chars('中国中国', 'object')
    {'中': 2UL, '国': 2UL}

positive:
    $STR.count_chars('中国', 'string')
    '中国'

positive:
    $STR.count_chars('A中B国A中B国', 'object')
    {'中': 2UL, '国': 2UL, 'A': 2UL, 'B': 2UL}

positive:
    $STR.count_chars('A中B国A中B国', 'string')
    'A中B国'

negative:
    $STR.rot13()
    ArgumentMissed

negative:
    $STR.rot13(null)
    WrongDataType

positive:
    $STR.rot13('')
    ''

positive:
    $STR.rot13('HVML 0.9.22')
    'UIZY 0.9.22'

positive:
    $STR.rot13('UIZY 0.9.22')
    'HVML 0.9.22'

positive:
    $STR.rot13('HVML PurC 呼噜猫 0.9.22')
    'UIZY CheP 呼噜猫 0.9.22'

positive:
    $STR.rot13('UIZY CheP 呼噜猫 0.9.22')
    'HVML PurC 呼噜猫 0.9.22'

negative:
    $STR.translate()
    ArgumentMissed

negative:
    $STR.translate(null)
    ArgumentMissed

negative:
    $STR.translate('', '')
    ArgumentMissed

negative:
    $STR.translate('', '', null)
    WrongDataType

positive:
    $STR.translate('', '', '')
    ''

positive:
    $STR.translate('HVML', 'HVML', 'PurC')
    'PurC'

positive:
    $STR.translate('abcd', 'abc', 'xyz')
    'xyzd'

positive:
    $STR.translate('hello world', 'aeiou', '12345')
    'h2ll4 w4rld'

positive:
    $STR.translate('HVML', 'HTML', 'PurC')
    'PVrC'

negative:
    $STR.translate('HVML呼噜猫', '呼噜猫', '')
    InvalidValue

negative:
    $STR.translate('', {})
    InvalidValue

negative:
    $STR.translate('HVML', {'HVML': null})
    InvalidValue

positive:
    $STR.translate('', {'HVML': 'PurC'})
    ''

positive:
    $STR.translate('HVML', {'HVML': 'PurC'})
    'PurC'

positive:
    $STR.translate('HVML 呼噜猫', {'HVML': 'PurC', '呼噜猫': 'Purring Cat'})
    'PurC Purring Cat'

positive:
    $STR.translate('HVML 呼噜猫', {'HVML': 'PurC', '呼噜猫': 'Purring Cat', 'xGUI': 'xGUI Pro'})
    'PurC Purring Cat'

positive:
    $STR.translate('HVML呼噜猫', {'HVML': 'PurC', '呼噜猫': ''})
    'PurC'

positive:
    $STR.translate('hi all, I said hello', { "h": "-", "hello": "hi", "hi": "hello"} )
    'hello all, I said hi'

negative:
    $STR.tokenize()
    ArgumentMissed

negative:
    $STR.tokenize(null)
    WrongDataType

negative:
    $STR.tokenize('', null)
    WrongDataType

negative:
    $STR.tokenize('abc', '')
    InvalidValue

positive:
    $STR.tokenize('')
    []

positive:
    $STR.tokenize('foo bar foobar ')
    ['foo', 'bar', 'foobar']

positive:
    $STR.tokenize(';aaa;;bbb;', ';')
    ['aaa', 'bbb']

positive:
    $STR.tokenize('中国、人民、万岁！', '、！')
    ['中国', '人民', '万岁']

positive:
    $STR.tokenize(' 中国、 人民、 、万岁！', ' 、！')
    ['中国', '人民', '万岁']

negative:
    $STR.strpos()
    ArgumentMissed

negative:
    $STR.strpos(null)
    ArgumentMissed

negative:
    $STR.strpos('', null)
    WrongDataType

negative:
    $STR.strpos('abc', '', null)
    InvalidValue

negative:
    $STR.strpos('abc', 'b', null)
    WrongDataType

positive:
    $STR.strpos('abc', 'b', 0, true)
    1UL

positive:
    $STR.strpos('abbc', 'b', -1, true)
    2UL

positive:
    $STR.strpos('abbc', 'B', 2, true)
    2UL

positive:
    $STR.strpos('', 'HVML', 3)
    false

positive:
    $STR.strpos('呼噜猫', 'HVML')
    false

positive:
    $STR.strpos('HVML呼噜猫HVML', 'HVML')
    0UL

positive:
    $STR.strpos('HVML呼噜猫HVML', 'HVML', -1)
    7UL

positive:
    $STR.strpos('HVML呼噜猫HVML', 'hvml', 0, true)
    0UL

positive:
    $STR.strpos('HVML呼噜猫HVML', 'hvml', -1, true)
    7UL

negative:
    $STR.strpbrk()
    ArgumentMissed

negative:
    $STR.strpbrk(null)
    ArgumentMissed

negative:
    $STR.strpbrk('', null)
    WrongDataType

negative:
    $STR.strpbrk('abc', '', null)
    InvalidValue

positive:
    $STR.strpbrk('abc', 'b')
    'bc'

positive:
    $STR.strpbrk('abc', 'ab')
    'abc'

positive:
    $STR.strpbrk('abc', 'B', true)
    'bc'

positive:
    $STR.strpbrk('abc', 'd')
    false

positive:
    $STR.strpbrk('中国', '国')
    '国'

positive:
    $STR.strpbrk('中华人民共和国', '华国')
    '华人民共和国'

positive:
    $STR.strpbrk('ａｂｃ', 'ｃ')
    'ｃ'

positive:
    $STR.strpbrk('ａｂｃ', 'Ａ', true)
    'ａｂｃ'

negative:
    $STR.htmlentities
    ArgumentMissed

negative:
    $STR.htmlentities(null)
    WrongDataType

negative:
    $STR.htmlentities('', null)
    WrongDataType

negative:
    $STR.htmlentities('', 'foo')
    InvalidValue

positive:
    $STR.htmlentities('')
    ''

positive:
    $STR.htmlentities('normal text')
    'normal text'

positive:
    $STR.htmlentities('"')
    '&quot;'

positive:
    $STR.htmlentities('<foo>')
    '&lt;foo&gt;'

positive:
    $STR.htmlentities('<foo name="bar">')
    '&lt;foo name=&quot;bar&quot;&gt;'

positive:
    $STR.htmlentities('<foo name="bar &amp; foobar">')
    '&lt;foo name=&quot;bar &amp;amp; foobar&quot;&gt;'

positive:
    $STR.htmlentities('<foo name="bar &amp; foo\'bar">', 'double-quotes')
    '&lt;foo name=&quot;bar &amp; foo\'bar&quot;&gt;'

negative:
    $STR.htmlentities!()
    ArgumentMissed

negative:
    $STR.htmlentities!(null)
    WrongDataType

negative:
    $STR.htmlentities!('', null)
    WrongDataType

negative:
    $STR.htmlentities!('', 'foo')
    InvalidValue

positive:
    $STR.htmlentities!('')
    ''

positive:
    $STR.htmlentities!('normal text')
    'normal text'

# The following test cases are generated with aid from AI
negative:
    $STR.split()
    ArgumentMissed

negative:
    $STR.split(null)
    WrongDataType

negative:
    $STR.split('', null)
    WrongDataType

negative:
    $STR.split('', 0)
    InvalidValue

negative:
    $STR.split('', -1)
    InvalidValue

positive:
    $STR.split('')
    []

positive:
    $STR.split('abc')
    ['a', 'b', 'c']

positive:
    $STR.split('abc', 2)
    ['ab', 'c']

positive:
    $STR.split('abcd', 2)
    ['ab', 'cd']

positive:
    $STR.split('中国人民', 2)
    ['中国', '人民']

positive:
    $STR.split('中国人民共和国', 3)
    ['中国人', '民共和', '国']

positive:
    $STR.split('中国人民共和国', 4)
    ['中国人民', '共和国']

positive:
    $STR.split('中国人民共和国', 5)
    ['中国人民共', '和国']

positive:
    $STR.split('中国人民共和国', 7)
    ['中国人民共和国']

positive:
    $STR.split('中国人民共和国', 8)
    ['中国人民共和国']

negative:
    $STR.pad()
    ArgumentMissed

negative:
    $STR.pad(null)
    ArgumentMissed

negative:
    $STR.pad('', null)
    WrongDataType

negative:
    $STR.pad('', 5, null)
    WrongDataType

negative:
    $STR.pad('', 5, '', null)
    WrongDataType

negative:
    $STR.pad('', 5, '', 'invalid')
    InvalidValue

negative:
    $STR.pad('test', -1)
    InvalidValue

positive:
    $STR.pad('', 0)
    ''

positive:
    $STR.pad('test', 8)
    'test    '

positive:
    $STR.pad('test', 8, '*')
    'test****'

positive:
    $STR.pad('test', 8, '*', 'left')
    '****test'

positive:
    $STR.pad('test', 8, '*', 'both')
    '**test**'

positive:
    $STR.pad('测试', 6)
    '测试    '

positive:
    $STR.pad('测试', 6, '中')
    '测试中中中中'

positive:
    $STR.pad('测试', 6, '中', 'left')
    '中中中中测试'

positive:
    $STR.pad('测试', 6, '中', 'both')
    '中中测试中中'

positive:
    $STR.pad('test', 8, 'ab')
    'testabab'

positive:
    $STR.pad('test', 8, 'ab', 'left')
    'ababtest'

positive:
    $STR.pad('test', 8, 'ab', 'both')
    'abtestab'

positive:
    $STR.pad('test', 4)
    'test'

positive:
    $STR.pad('test', 3)
    'test'
negative:
    $STR.substr_compare()
    ArgumentMissed

negative:
    $STR.substr_compare(null)
    ArgumentMissed

negative:
    $STR.substr_compare('', null)
    ArgumentMissed

negative:
    $STR.substr_compare('', '', null)
    WrongDataType

negative:
    $STR.substr_compare('abc', 'b', 4)
    InvalidValue

negative:
    $STR.substr_compare('abc', 'b', 0, -1)
    InvalidValue

positive:
    $STR.substr_compare('abc', 'b', 1)
    0

positive:
    $STR.substr_compare('abc', 'B', 1)
    1

positive:
    $STR.substr_compare('abc', 'b', -1)
    1

positive:
    $STR.substr_compare('abc', 'B', 1, null, true)
    0

positive:
    $STR.substr_compare('abcdef', 'cd', 2, 2)
    0

positive:
    $STR.substr_compare('abcdef', 'cde', 2, 2)
    0

positive:
    $STR.substr_compare('中国人民', '国人', 1, 2)
    0

positive:
    $STR.substr_compare('中国人民', '国民', 1, 2)
    -1

positive:
    $STR.substr_compare('HVML呼噜猫', 'hvml', 0, 4, true)
    0

positive:
    $STR.substr_compare('HVML呼噜猫', 'hvml呼', 0, 5, true)
    0

positive:
    $STR.substr_compare('abc', 'def', 0)
    -1

positive:
    $STR.substr_compare('def', 'abc', 0)
    1

negative:
    $STR.substr_count()
    ArgumentMissed

negative:
    $STR.substr_count(null)
    ArgumentMissed

negative:
    $STR.substr_count('', null)
    WrongDataType

negative:
    $STR.substr_count('abc', '', null)
    WrongDataType

negative:
    $STR.substr_count('abc', 'b', -1)
    InvalidValue

negative:
    $STR.substr_count('abc', 'b', 0, -1)
    InvalidValue

positive:
    $STR.substr_count('', '')
    0UL

positive:
    $STR.substr_count('abc', '')
    0UL

positive:
    $STR.substr_count('abc', 'b')
    1UL

positive:
    $STR.substr_count('abcabc', 'bc')
    2UL

positive:
    $STR.substr_count('中国中国人民共和国', '中国')
    2UL

positive:
    $STR.substr_count('中国中国人民共和国', '中国', 2)
    1UL

positive:
    $STR.substr_count('中国中国人民共和国', '中国', 0, 4)
    2UL

positive:
    $STR.substr_count('中国中国人民共和国', '中国', 2, 2)
    1UL

positive:
    $STR.substr_count('中国中国人民共和国', '日本')
    0UL

positive:
    $STR.substr_count('The quick brown fox jumps over the lazy dog', 'the', 0, 0)
    1UL
negative:
    $STR.chunk_split()
    ArgumentMissed

negative:
    $STR.chunk_split(null)
    WrongDataType

negative:
    $STR.chunk_split('', null)
    WrongDataType

negative:
    $STR.chunk_split('', 76, null)
    WrongDataType

negative:
    $STR.chunk_split('test', -1)
    InvalidValue

negative:
    $STR.chunk_split('test', 0)
    InvalidValue

positive:
    $STR.chunk_split('')
    ''

positive:
    $STR.chunk_split('test')
    'test'

positive:
    $STR.chunk_split('test', 2)
    'te\r\nst'

positive:
    $STR.chunk_split('test', 2, '*')
    'te*st'

positive:
    $STR.chunk_split('中国人民', 3)
    '中国人\r\n民'

positive:
    $STR.chunk_split('中国人民共和国', 4, '||')
    '中国人民||共和国'

positive:
    $STR.chunk_split('HVML is a great programming language!', 5, ' ')
    'HVML  is a  great  prog rammi ng la nguag e!'

positive:
    $STR.chunk_split('abcdefghijklmnopqrstuvwxyz', 5, '-')
    'abcde-fghij-klmno-pqrst-uvwxy-z'

negative:
    $STR.substr_replace()
    ArgumentMissed

negative:
    $STR.substr_replace(null)
    ArgumentMissed

negative:
    $STR.substr_replace('', null)
    ArgumentMissed

negative:
    $STR.substr_replace('', '', null)
    WrongDataType

negative:
    $STR.substr_replace('', '', 0, null)
    WrongDataType

positive:
    $STR.substr_replace('', '', 0)
    ''

positive:
    $STR.substr_replace('HVML', 'PurC', 0)
    'PurC'

positive:
    $STR.substr_replace('HVML', 'PurC', 1)
    'HPurC'

positive:
    $STR.substr_replace('HVML', 'PurC', -1)
    'HVMPurC'

positive:
    $STR.substr_replace('HVML', 'PurC', 0, 2)
    'PurCML'

positive:
    $STR.substr_replace('HVML', 'PurC', 1, 2)
    'HPurCL'

positive:
    $STR.substr_replace('HVML', 'PurC', -2, 1)
    'HVPurCL'

positive:
    $STR.substr_replace('HVML', 'PurC', 2, -1)
    'HVPurCL'

positive:
    $STR.substr_replace('HVML', 'PurC', 1, 0)
    'HPurCVML'

positive:
    $STR.substr_replace(['HVML', 'xGUI'], 'PurC', 0)
    ['PurC', 'PurC']

positive:
    $STR.substr_replace(['HVML', 'xGUI'], ['PurC', 'Pro'], 0)
    ['PurC', 'Pro']

positive:
    $STR.substr_replace(['HVML', 'xGUI'], ['PurC', 'Pro'], [0, 1])
    ['PurC', 'xPro']

positive:
    $STR.substr_replace(['HVML', 'xGUI'], ['PurC', 'Pro'], 0, [2, 3])
    ['PurCML', 'ProI']

positive:
    $STR.substr_replace('中华人民共和国', '伟大的', 2)
    '中华伟大的'

positive:
    $STR.substr_replace('中华人民共和国', '伟大的', -2)
    '中华人民共伟大的'

positive:
    $STR.substr_replace('中华人民共和国', '伟大的', 2, 3)
    '中华伟大的和国'

positive:
    $STR.substr_replace('中华人民共和国', '伟大的', -3, 2)
    '中华人民伟大的国'

negative:
    $STR.printf()
    ArgumentMissed

negative:
    $STR.printf('')
    ArgumentMissed

negative:
    $STR.printf(null, 5)
    WrongDataType

negative:
    $STR.printf('%s/%s', 16)
    WrongDataType

positive:
    $STR.printf('%x', 16)
    '10'

positive:
    $STR.printf('Tom is %03d years old, while Jerry is %03d years old.', 9, 7)
    'Tom is 009 years old, while Jerry is 007 years old.'

positive:
    $STR.printf('Tom is %d years old, while Jerry is %d years old.', 9, 7)
    'Tom is 9 years old, while Jerry is 7 years old.'

positive:
    $STR.printf('Tom is %d years old, while Jerry is %d years old.', [9, 7])
    'Tom is 9 years old, while Jerry is 7 years old.'

positive:
    $STR.printf('no format characters', 16)
    'no format characters'

positive:
    $STR.printf('%s/%d', 'Tom', 16)
    'Tom/16'

positive:
    $STR.printf($STREAM.stdout, '%03d', 16)
    3UL

positive:
    $STR.printf($STREAM.stdout, 'Tom is 0x%02X years old, while Jerry is 0x%02X years old.\n', [10, 15])
    54UL

negative:
    $STR.scanf()
    ArgumentMissed

negative:
    $STR.scanf('')
    ArgumentMissed

negative:
    $STR.scanf(null, 5)
    WrongDataType

negative:
    $STR.scanf('Tom is 9', 'tom is %d')
    InvalidValue

negative:
    $STR.scanf('16', '%Z')
    InvalidValue

positive:
    $STR.scanf('%', '%%')
    []

positive:
    $STR.scanf('16', '%x')
    [22UL]

positive:
    $STR.scanf('125', '%lld')
    [125L]

positive:
    $STR.scanf('125', '%u')
    [125UL]

positive:
    $STR.scanf('Tom is 9 years old, while Jerry is 7 years old.', 'Tom is %d years old, while Jerry is %d years old.')
    [9L, 7L]

positive:
    $STR.scanf('Tom 16', '%*s %d')
    [16L]

positive:
    $STR.scanf('Tom   16\t33\r\n 16', '%s %d %u %x')
    ['Tom', 16L, 33UL, 22UL]

positive:
    $STR.scanf('Tom/16 165', '%s %f')
    ['Tom/16', 165]

positive:
    $STR.scanf('no format characters', 'no format characters')
    []

positive:
    $STR.scanf('', '')
    []

positive:
    $STR.scanf('123', '%d')
    [123L]

positive:
    $STR.scanf('-123', '%d')
    [-123L]

positive:
    $STR.scanf('123', '%u')
    [123UL]

positive:
    $STR.scanf('0xFF', '%x')
    [255UL]

positive:
    $STR.scanf('0777', '%o')
    [511UL]

positive:
    $STR.scanf('3.14', '%f')
    [3.1400001049041748]

positive:
    $STR.scanf('-3.14e2', '%f')
    [-314.0]

positive:
    $STR.scanf('hello world', '%s %s')
    ['hello', 'world']

positive:
    $STR.scanf('中国 人民', '%s %s')
    ['中国', '人民']

positive:
    $STR.scanf('AB', '%c%c')
    ['A', 'B']

positive:
    $STR.scanf('中国', '%3c%3c')
    ['中', '国']

positive:
    $STR.scanf('age: 18 height: 175.5', 'age: %d height: %f')
    [18L, 175.5]

positive:
    $STR.scanf('12345', '%2d%3d')
    [12L, 345L]

positive:
    $STR.scanf('中国人民', '%6s%6s')
    ['中国', '人民']

positive:
    $STR.scanf('a:b:c', '%c%*c%c%*c%c')
    ['a', 'b', 'c']

positive:
    $STR.scanf(bx313233, '%d')
    [123L]

positive:
    $STR.scanf('abc', '%d')
    []

positive:
    $STR.scanf('123abc', '%d%d')
    [123L]

positive:
    $STR.scanf('A B', '%c %c')
    ['A', 'B']

positive:
    $STR.scanf('中 国', '%3c %3c')
    ['中', '国']

positive:
    $STR.scanf('姓名:Linux 年龄:25', '姓名:%s 年龄:%d')
    ['Linux', 25L]

negative:
    $STR.printp()
    ArgumentMissed

negative:
    $STR.printp(null)
    ArgumentMissed

negative:
    $STR.printp('[0]', null)
    WrongDataType

negative:
    $STR.printp('{foo}', null)
    WrongDataType

negative:
    $STR.printp('[1]', [null])
    BadIndex

negative:
    $STR.printp('{foo}', {'bar': 'baz'})
    NoSuchKey

negative:
    $STR.printp('#1', null)
    ArgumentMissed

positive:
    $STR.printp('', '')
    ''

positive:
    $STR.printp('\\[]', null)
    '[]'

positive:
    $STR.printp('\\{]', null)
   '{]'

positive:
     $STR.printp('\\#0', null)
    '#0'

positive:
     $STR.printp('\\\\', null)
    '\\'

positive:
    $STR.printp('#0', '')
    '""'

positive:
    $STR.printp('There are two boys: [0] and [1]', ['Tom', 'Jerry'])
    'There are two boys: "Tom" and "Jerry"'

positive:
    $STR.printp('There are two boys: {name0} and {name1}', { name0: 'Tom', name1: 'Jerry' })
    'There are two boys: "Tom" and "Jerry"'

positive:
    $STR.printp('There are two boys: #0 and #1', 'Tom', 'Jerry')
    'There are two boys: "Tom" and "Jerry"'

positive:
    $STR.printp('There are two boys: {name0} and {name1}; the object serialized: #0', { name0: 'Tom', name1: 'Jerry' })
    'There are two boys: "Tom" and "Jerry"; the object serialized: {"name0":"Tom","name1":"Jerry"}'

positive:
    $STR.printp($STREAM.stdout, 'There are two boys: {name0} and {name1}; the object serialized: #0\n', { name0: 'Tom', name1: 'Jerry' })
    94UL

negative:
    $STR.scanp()
    ArgumentMissed

negative:
    $STR.scanp(null)
    ArgumentMissed

negative:
    $STR.scanp(null, null)
    WrongDataType

negative:
    $STR.scanp(null, '{foo}')
    WrongDataType

positive:
    $STR.scanp('"bar"', '{foo}')
    {foo:'bar'}

positive:
    $STR.scanp('"foo"', '[]')
    ['foo']

positive:
    $STR.scanp('"foo"', '[2]')
    [null, null, 'foo']

positive:
    $STR.scanp('My name is "Tom"', 'My name is #?')
    'Tom'

positive:
    $STR.scanp('My name is "Tom"', 'My\tname\r\nis   #?')
    'Tom'

positive:
    $STR.scanp('"foo" "bar"', '[] []')
    ['foo', 'bar']

positive:
    $STR.scanp('There are two boys: "Tom Bean" and "Jerry Right"', 'There are two boys: [0] and [1]')
    ['Tom Bean', 'Jerry Right']

positive:
    $STR.scanp('There are two boys: "Tom Bean" and "Jerry Right"', 'There are two boys: {name0} and {name1}')
    { name0: 'Tom Bean', name1: 'Jerry Right' }

positive:
    $STR.scanp('The object is { foo: "bar", bar: "baz"}', 'The object is #?')
    { foo: 'bar', bar: 'baz'}

#positive:
#    {{ $STREAM.stdout.writelines('Please input `My name is "Tom"` without backticks strictly!'); $STR.scanp($STREAM.stdin, 'My name is #?') }}
#     'Tom'

positive:
    $DATA.serialize($DATA.parse(']'))
    '"<undefined>"'

positive:
    $DATA.serialize(undefined, 'plain')
    "null"

positive:
    $DATA.serialize(300, 'default', $STREAM.stdout)
    3UL

positive:
    $DATA.serialize($DATA.sort([], 'asc'))
    "[]"

positive:
    $DATA.serialize([1, 2], 'default', $STREAM.stdout)
    5UL

positive:
    {{ $STREAM.open('file:///tmp/test_str_scanp', 'write create truncate').writelines('My name is "Tom"'); $STR.scanp($STREAM.open('file:///tmp/test_str_scanp', 'read'), 'My name is #?') }}
    'Tom'

positive:
    $DATA.longint()
    0L

positive:
    $DATA.longint(null)
    0L

positive:
    $DATA.longint(0)
    0L

positive:
    $DATA.longint(123)
    123L

positive:
    $DATA.longint(0xFFFFFFFFFFFFFFFFUL)
    -1L

positive:
    $DATA.longint(-123)
    -123L

positive:
    $DATA.longint(123.45)
    123L

positive:
    $DATA.longint(-123.45)
    -123L

positive:
    $DATA.longint("123")
    123L

positive:
    $DATA.longint("-123")
    -123L

positive:
    $DATA.longint("123.45")
    123L

positive:
    $DATA.longint("-123.45")
    -123L

positive:
    $DATA.longint("abc")
    0L

positive:
    $DATA.longint("12abc")
    12L

positive:
    $DATA.longint(9223372036854775807)
    9223372036854775807L

positive:
    $DATA.longint(-9223372036854775808)
    -9223372036854775808L

positive:
    $DATA.longint(9223372036854775808)
    9223372036854775808L

positive:
    $DATA.longint(-9223372036854775809)
    -9223372036854775809L

positive:
    $DATA.ulongint()
    0UL

positive:
    $DATA.ulongint(null)
    0UL

positive:
    $DATA.ulongint(0)
    0UL

positive:
    $DATA.ulongint(42)
    42UL

positive:
    $DATA.ulongint(-1)
    -1UL

positive:
    $DATA.ulongint(-1)
    0xFFFFFFFFFFFFFFFFUL

positive:
    $DATA.ulongint(-1L)
    -1UL

positive:
    $DATA.ulongint(-1L)
    0xFFFFFFFFFFFFFFFFUL

positive:
    $DATA.ulongint(3.14)
    3UL

positive:
    $DATA.ulongint("123")
    123UL

positive:
    $DATA.ulongint("0xFF")
    255UL

positive:
    $DATA.ulongint("18446744073709551615")
    18446744073709551615UL

positive:
    $DATA.ulongint("18446744073709551616")
    18446744073709551615UL

positive:
    $DATA.ulongint("-123")
    0UL

positive:
    $DATA.ulongint(true)
    1UL

positive:
    $DATA.ulongint(false)
    0UL

positive:
    $DATA.ulongint("invalid")
    0UL

positive:
    $DATA.ulongint([])
    0UL

positive:
    $DATA.ulongint({})
    0UL

positive:
    $DATA.longdouble()
    0FL

positive:
    $DATA.longdouble(null)
    0FL

positive:
    $DATA.longdouble(0)
    0.0FL

positive:
    $DATA.longdouble(123)
    123.0FL

positive:
    $DATA.longdouble(-123)
    -123.0FL

positive:
    $DATA.longdouble(123.5)
    123.5FL

positive:
    $DATA.longdouble(-123.5)
    -123.5FL

positive:
    $DATA.longdouble(-123.456FL)
    -123.456FL

positive:
    $DATA.longdouble('123.456')
    123.456FL

positive:
    $DATA.longdouble('-123.456')
    -123.456FL

positive:
    $DATA.longdouble('1e10')
    10000000000.0FL

positive:
    $DATA.longdouble('-1e-10')
    -0.0000000001FL

positive:
    $DATA.longdouble('abc')
    0.0FL

positive:
    $DATA.longdouble([])
    0.0FL

positive:
    $DATA.longdouble({})
    0.0FL

# TODO: more cases for bigint here.
positive:
    $DATA.serialize($DATA.bigint(0xFF))
    '"255N"'

positive:
    $DATA.serialize($DATA.bigint(0xFF), 'bigint-hex')
    '"0xffN"'

negative:
    $DATA.abs()
    ArgumentMissed

positive:
    $DATA.abs(-3)
    3

positive:
    $DATA.abs(3L)
    3L

positive:
    $DATA.abs(-3.0FL)
    3.0FL

positive:
    $DATA.abs(true)
    1

positive:
    $DATA.abs(false)
    0

positive:
    $DATA.abs(null)
    0

positive:
    $DATA.abs([1,2.3])
    3.3

positive:
    $DATA.abs("-123")
    123

