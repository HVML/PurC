#!/usr/bin/purc

# RESULT: 'All workers exited'

<hvml target="void">
    <head>
        <define as 'logMsg'>
            $RUNNER.enablelog('all', 'stderr')

            <inherit>
                $RUNNER.logmsg($DATA.serialize($?))
            </inherit>
        </define>
    </head>

    <body id='server' >

        <include with $logMsg on 'The server is running...request: ' />
        <include with $logMsg on $REQ />

        <init as 'sslSettings' with {} />
        <test with $L.streq('caseless', $REQ.secure, 'true') >
            <update on $sslSettings to 'merge'>
                {
                    'sslkey': "$REQ.base/localhost.key",
                    'sslcert': "$REQ.base/localhost.crt",
                    'sslsessioncacheid': 'hvml',
                }
            </update>
        </test>

        <include with $logMsg on $sslSettings />

        <define as spawnWorker>
            <init as stdout_pipe with $SYS.pipe() temp>
                <catch for `ANY`>
                    <return with "Server failed with $?.name when calling \$SYS.pipe() for stdout" />
                </catch>
            </init>

            <init as stderr_pipe with $SYS.pipe() temp>
                <catch for `ANY`>
                    <return with "Server failed with $?.name when calling \$SYS.pipe() for stderr." />
                </catch>
            </init>

            <init as file_actions temp>
            [!
                { action: 'close', fd: 0 },
                { action: 'dup2',  fd: $stdout_pipe[1], newfd: 1 },
                { action: 'close', fd: $stdout_pipe[0] },
                { action: 'dup2',  fd: $stderr_pipe[1], newfd: 2 },
                { action: 'close', fd: $stderr_pipe[0] },
            ]
            </init>

            <init as argv temp>
            [!
                'purc',
                '-a', 'cn.fmsoft.hvml.test',
                '-r', 'worker',
                '-q', $STR.format_c("secure=%s&fd=%d&sslsessioncacheid=hvml&handshake=true", $REQ.secure, $fd),
                "$REQ.base/spawn/worker.hvml"
            ]
            </init>

            <inherit>
                {{
                    $SYS.spawn("$SYS.cwd/bin/purc", $file_actions, $argv) &&
                    $SYS.close($stdout_pipe[1]) &&
                    $SYS.close($stderr_pipe[1])
                }}
            </inherit>

            <return with [! $stdout_pipe[0], $stderr_pipe[0] ] />
        </define>

        <init as 'clients' with {} />

        <observe on $clients for 'shrink'>
            <include with $logMsg on 'clients shrunken:' />
            <include with $logMsg on $clients />

            <test with $DATA.count($clients)>
                <differ>
                    <exit with 'All workers exited' />
                </differ>
            </test>
        </observe>

        <init as 'srvListenSocket' with $SOCKET.stream('inet://localhost:8080', 'none', 32, $sslSettings) >
        </init>

        <!-- iterate on [! 'client0', 'client1', 'client2', 'client3' ] -->
            <load from "#{$REQ.client}" within 'client' onto 'null:' as 'client' async >
                <catch for `ANY`>
                    <exit with "Server failed with $?.name when loading client" />
                </catch>
            </load>

            <observe on $client for "corState:exited" >

                <inherit>
                    $STREAM.stdout.writelines("Client exited with $?")
                </inherit>
            </observe>
        <!-- /iterate -->

        <include with $logMsg on 'The server is accepting...' />

        <choose on $srvListenSocket.accept('nonblock', 'websocket', $sslSettings)>
            <catch for `ANY`>
                <exit with "Server failed with $?.name when calling accept()" />
            </catch>

            <test with $L.not($DATA.isequal($?, null)) >

                <include with $logMsg on "Server accpeted a client from $?.peerAddr:$?.peerPort" />

                <init as 'clientId' with "$?.peerAddr:$?.peerPort" temp />

                <update on $clients to 'merge' with { $clientId : { wsStream: $? }} />

                <observe on $clients[$clientId].wsStream for 'handshake'>
                    $clientId

                    <init as clientId with $_observedContent temp />

                    <inherit>
                    {{
                        $STREAM.stdout.writelines("Server got HANDSHAKE event from `$_observedContent`; payload:");
                        $STREAM.stdout.writelines($DATA.serialize($?));
                        $_observedOn.send_handshake_resp(101);
                    }}
                    </inherit>

                    <inherit on $_observedOn.sync() />
                    <call on $spawnWorker with { fd: $_observedOn.fd() } >

                        <test with $L.strne('case', $DATA.type($?), 'string') >

                            <init as 'stdout' with $STREAM.from($?[0], 'keep') temp >
                                <catch for `ANY`>
                                    <exit with "Server failed with $?.name when calling \$STREAM.from()" />
                                </catch>
                            </init>

                            <init as 'stderr' with $STREAM.from($?[1], 'keep') temp >
                                <catch for `ANY`>
                                    <exit with "Server failed with $?.name when calling \$STREAM.from()" />
                                </catch>
                            </init>

                            <update on $clients at ".$clientId" to 'merge' with { stdoutStream: $stdout, stderrStream: $stderr } />

                            <observe on $stdout for 'stream:readable'>
                                $clientId

                                <choose on $_observedOn.readlines(1) >
                                    <include with $logMsg on $?[0] />
                                    <test with $L.streq('caseless', $?[0], 'Ready') >
                                        <inherit on $clients[$_observedContent].wsStream.finish() />
                                    </test>

                                    <catch for `BrokenPipe`>
                                        <inherit on $_observedOn.close() />
                                        <forget on $_observedOn for '*' />
                                    </catch>
                                </choose>

                            </observe>

                            <observe on $stderr for 'stream:readable'>
                                $clientId

                                <choose on $_observedOn.readlines(1) >
                                    <include with $logMsg on $?[0] />
                                    <catch for `BrokenPipe`>
                                        <inherit on $_observedOn.close() />
                                        <include with $logMsg on "Removing $_observedContent" />
                                        <update on $clients at ".$_observedContent" to 'remove' silently />
                                        <forget on $_observedOn for '*' />
                                    </catch>
                                </choose>
                            </observe>
                        </test>
                    </call>

                </observe>

                <observe on $clients[$clientId].wsStream for 'error'>
                    $clientId

                    <inherit>
                    {{
                        $STREAM.stdout.writelines("Server got ERROR event for `$_observedContent`; payload:");
                        $STREAM.stdout.writelines($DATA.serialize($?));
                    }}
                    </inherit>

                    <exit with 'Bad Client' />
                </observe>

                <!-- observe on $clients[$clientId].wsStream for 'message'>
                    $clientId

                    <test with $L.streq('case', $?, 'Bye')>
                        <inherit>
                            $_observedOn.close();
                        </inherit>

                        <exit with 'Good Client' />

                        <differ>

                            <inherit>
                            {{
                                $STREAM.stdout.writelines("Server got MESSAGE event from `$_observedContent`; payload:");
                                $STREAM.stdout.writelines($DATA.serialize($?));
                                $_observedOn.send("Hello from the server");
                            }}
                            </inherit>

                        </differ>
                    </test>
                </observe -->

                <observe on $clients[$clientId].wsStream for 'close'>
                    $clientId

                    <inherit>
                    {{
                        $STREAM.stdout.writelines("Server got CLOSE event from `$_observedContent`; payload:");
                        $STREAM.stdout.writelines($DATA.serialize($?))
                    }}
                    </inherit>

                    <exit with 'Good Client' />
                </observe>
            </test>
        </choose>

    </body>

    <!-- A plain client -->
    <body id="plain">

        <include with $logMsg on 'Client is running...' />

        <init as 'cliStreamSocket' with $STREAM.open('inet://localhost:8080/', 'default', 'websocket', { secure: false } ) >
            <catch for `ANY`>
                <exit with "Client failed with $?.name when calling STREAM.open()" />
            </catch>

            <include with $logMsg on 'Client has connected to the server.' />

        </init>

        <observe on $cliStreamSocket for 'handshake'>
            <include with $logMsg on 'Client got HANDKSHAKE event' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to send some words.' />

            <inherit>
                {{
                     $cliStreamSocket.send("Hello from a good client.");
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>
        </observe>

        <observe on $cliStreamSocket for 'message'>
            <include with $logMsg on 'Client got MESSAGE event from the server:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to say bye.' />

            <inherit>
                {{
                     $cliStreamSocket.send("Bye");
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

        </observe>

        <observe on $cliStreamSocket for 'close'>
            <include with $logMsg on 'Client got CLOSE event from the server:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to exit.' />

            <inherit>
                {{
                     $cliStreamSocket.close()
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

            <exit with 'Bye' />
        </observe>

        <observe on $cliStreamSocket for 'error'>
            <include with $logMsg on 'Client got ERROR event:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to exit.' />

            <inherit>
                {{
                     $cliStreamSocket.close()
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

            <exit with 'Bye' />
        </observe>
    </body>

    <!-- A secure client -->
    <body id="secure">

        <include with $logMsg on 'Client is running...' />

        <init as 'cliStreamSocket' with $STREAM.open('inet://localhost:8080/', 'default', 'websocket', { secure: true } ) >
            <catch for `ANY`>
                <exit with "Client failed with $?.name when calling STREAM.open()" />
            </catch>

            <include with $logMsg on 'Client has connected to the server.' />

        </init>

        <observe on $cliStreamSocket for 'handshake'>
            <include with $logMsg on 'Client got HANDKSHAKE event' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to send some words.' />

            <inherit>
                {{
                     $cliStreamSocket.send("Hello from a good client.");
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>
        </observe>

        <observe on $cliStreamSocket for 'message'>
            <include with $logMsg on 'Client got MESSAGE event from the server:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to say bye.' />

            <inherit>
                {{
                     $cliStreamSocket.send("Bye");
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

        </observe>

        <observe on $cliStreamSocket for 'close'>
            <include with $logMsg on 'Client got CLOSE event from the server:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to exit.' />

            <inherit>
                {{
                     $cliStreamSocket.close()
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

            <exit with 'Bye' />
        </observe>

        <observe on $cliStreamSocket for 'error'>
            <include with $logMsg on 'Client got ERROR event:' />
            <include with $logMsg on $DATA.serialize($?) />

            <include with $logMsg on 'Client is going to exit.' />

            <inherit>
                {{
                     $cliStreamSocket.close()
                 }}

                <catch for `ANY`>
                    <exit with "Client failed with $?.name when calling cliStreamSocket.close()" />
                </catch>
            </inherit>

            <exit with 'Bye' />
        </observe>
    </body>

</hvml>

