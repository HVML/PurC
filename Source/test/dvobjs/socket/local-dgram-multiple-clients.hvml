#!/usr/bin/purc

# RESULT: { 'client0': bx00112233445566778899AABBCC, 'client1': bx112233445566778899AABBCCDD, 'client2': bx2233445566778899AABBCCDDEE, 'client3': bx33445566778899AABBCCDDEEFF, 'success': 4L, 'error': 0L, 'except': 0L }

<hvml target="void">
    <body>

        <init as 'got'>
            {
                'client0': bx,
                'client1': bx,
                'client2': bx,
                'client3': bx,
                'success': 0L,
                'error': 0L,
                'except': 0L,
            }
        </init>

        <init as 'dgramSocket' with $SOCKET.dgram('local:///var/tmp/hvml-dgram-server', 'default') >
            <catch for `ANY`>
                <exit with "Server failed with $?.name when calling SOCKET.dgram()" />
            </catch>
            <observe on $dgramSocket for 'socket:newDatagram' >
                <inherit>
                    $STREAM.stdout.writelines('Got socket:newDatagram event')
                </inherit>

                <choose on $dgramSocket.recvfrom('dontwait', 13) >
                    <inherit>
                        $STREAM.stdout.writelines("Return values of recvfrom(): $?.recved | $?.errorname | $?['sourceaddr']")
                    </inherit>

                    <test with $L.gt($?.recved, 0) >
                        <init as 'clientName' with $STR.strstr($?['sourceaddr'], 'client') temp />

                        <inherit>
                            $STREAM.stdout.writelines("Client name: $clientName")
                        </inherit>

                        <update on $got at ".$clientName" with $DATA.pack("bytes:0 bytes:{$?.recved}", $got[$clientName], $?.bytes) />

                        <differ>
                            $STREAM.stdout.writelines("Do nothing")
                        </differ>
                    </test>

                    <catch for `ANY`>
                        <exit with "Server failed with $?.name when calling dgramSocket.recvfrom()" />
                    </catch>
                </choose>
            </observe>
        </init>

        <define as 'sendDatagram' >
            <init as 'dgramSocket' with $SOCKET.dgram('local:///var/tmp/hvml-dgram-$?.name', 'default') >
                <catch for `ANY`>
                    <return with "Client $2?.name failed with $?.name when calling SOCKET.dgram()" />
                </catch>
            </init>

            <choose on $dgramSocket.sendto('local:///var/tmp/hvml-dgram-server', 'default', $?.bytes) >
                <inherit>
                    $STREAM.stdout.writelines("Client $2?.name sent bytes: $?.sent")
                </inherit>

                <return with 'success' />

                <catch for `ANY`>
                    <return with "Client $2?.name failed with $2?.name when calling dgramSocket.sendto()" />
                </catch>
            </choose>
        </define>

        <init as 'datagrams'>
            {
                'client0': bx00112233445566778899AABBCC,
                'client1': bx112233445566778899AABBCCDD,
                'client2': bx2233445566778899AABBCCDDEE,
                'client3': bx33445566778899AABBCCDDEEFF
            }
        </init>

        <iterate on $datagrams by 'KEY: ALL FOR KV' >

            <inherit>
                $STREAM.stdout.writelines("Calling sendDatagram for $?.k")
            </inherit>

            <init as 'clientName' with "$?.k" />

            <call on $sendDatagram within $clientName with {name: $clientName, bytes: $?.v} as $clientName concurrently asynchronously />
            <observe on ${$clientName} for 'callState:success'>
                <inherit>
                    $STREAM.stdout.writelines("Client returns: $?")
                </inherit>
                <update on $got at '.success' with $DATA.arith('+', $got['success'], 1) />
            </observe>

            <observe on ${$clientName} for 'callState:error/*'>
                <inherit>
                    $STREAM.stdout.writelines("Client returns with an error: $_eventSubName")
                </inherit>
                <update on $got at '.error' with $DATA.arith('+', $got['error'], 1) />
            </observe>

            <observe on ${$clientName} for 'callState:except/*'>
                <inherit>
                    $STREAM.stdout.writelines("Client returns with an exception: $_eventSubName")
                </inherit>
                <update on $got at '.except' with $DATA.arith('+', $got['except'], 1) />
            </observe>
        </iterate>

        <observe on $CRTN for 'idle'>

            <test with $L.eq($DATA.arith('+', $got['success'], $DATA.arith('+', $got['error'], $got['except'])), 4) >
                <exit with $got />
            </test>

        </observe>

    </body>

</hvml>

