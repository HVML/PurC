PCHVML_TOKEN_COMMENT|<!-- The expected output of this HVML program should be like

Current time: 00:00
Current time: 00:03
Current time: 00:01
Current time: 00:02
Current time: 00:07
Current time: 00:04
Current time: 00:08
Current time: 00:05
Current time: 00:03
Current time: 00:00

I slept for 50 seconds totally
-->
PCHVML_TOKEN_VCM_TREE|"

"
PCHVML_TOKEN_DOCTYPE|<!DOCTYPE hvml>
PCHVML_TOKEN_VCM_TREE|"
"
PCHVML_TOKEN_START_TAG|<hvml target="void">
PCHVML_TOKEN_VCM_TREE|"

    "
PCHVML_TOKEN_START_TAG|<init as="startTime" with=getMember(getVariable("SYS"), "time")/>
PCHVML_TOKEN_VCM_TREE|"

    "
PCHVML_TOKEN_START_TAG|<iterate on=0 onlyif=callGetter(getMember(getVariable("L"), "lt"), getVariable("0<"), 10) with=callGetter(getMember(getVariable("DATA"), "arith_calc"), "+", getVariable("0<"), 1) nosetotail>
PCHVML_TOKEN_VCM_TREE|"
        "
PCHVML_TOKEN_START_TAG|<sleep with=callGetter(getMember(getVariable("SYS"), "random"), 10)>
PCHVML_TOKEN_VCM_TREE|"
            "
PCHVML_TOKEN_VCM_TREE|callGetter(getMember(getMember(getVariable("STREAM"), "stdout"), "writelines"), callGetter(getMember(getVariable("STR"), "join"), "Current time: ", callGetter(getMember(getVariable("SYS"), "time"), "%H:%m")))
PCHVML_TOKEN_END_TAG|</sleep>
PCHVML_TOKEN_VCM_TREE|"
    "
PCHVML_TOKEN_END_TAG|</iterate>
PCHVML_TOKEN_VCM_TREE|"

    "
PCHVML_TOKEN_VCM_TREE|{{ callGetter(getMember(getMember(getVariable("STREAM"), "stdout"), "writelines"), callGetter(getMember(getVariable("STR"), "join"), "I slept for ", callGetter(getMember(getVariable("DATA"), "arith_calc"), "-", getMember(getVariable("SYS"), "time"), getVariable("startTime")), " seconds totally")) ; callGetter(getMember(getVariable("L"), "lt"), callGetter(getMember(getVariable("DATA"), "arith_calc"), "-", getMember(getVariable("SYS"), "time"), getVariable("startTime")), 0) }}
PCHVML_TOKEN_END_TAG|</hvml>
