include(GNUInstallDirs)

# FIXME: These should line up with versions in Version.xcconfig
set(PURC_MAC_VERSION 0.0.1)
set(MACOSX_FRAMEWORK_BUNDLE_VERSION 0.0.1)

# These are shared variables, but we special case their definition so that we can use the
# CMAKE_INSTALL_* variables that are populated by the GNUInstallDirs macro.
set(LIB_INSTALL_DIR "${CMAKE_INSTALL_FULL_LIBDIR}" CACHE PATH "Absolute path to library installation directory")
set(EXEC_INSTALL_DIR "${CMAKE_INSTALL_FULL_BINDIR}" CACHE PATH "Absolute path to executable installation directory")
set(LIBEXEC_INSTALL_DIR "${CMAKE_INSTALL_FULL_LIBEXECDIR}/purc" CACHE PATH "Absolute path to install executables executed by the library")
set(HEADER_INSTALL_DIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}" CACHE PATH "Absolute path to header installation directory")
set(PURC_HEADER_INSTALL_DIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}/purc" CACHE PATH "Absolute path to PurC header installation directory")

add_definitions(-DBUILDING_MAC__=1)
add_definitions(-DPURC_LIBEXEC_DIR="${LIBEXEC_INSTALL_DIR}")

# On macOS, search Homebrew for keg-only versions of Bison and Flex. Xcode does
# not provide new enough versions for us to use.
if (CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin")
    execute_process(
        COMMAND brew --prefix bison
        RESULT_VARIABLE BREW_BISON
        OUTPUT_VARIABLE BREW_BISON_PREFIX
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (BREW_BISON EQUAL 0 AND EXISTS "${BREW_BISON_PREFIX}")
        message(STATUS "Found Bison keg installed by Homebrew at ${BREW_BISON_PREFIX}")
        set(BISON_EXECUTABLE "${BREW_BISON_PREFIX}/bin/bison")
    endif ()

    execute_process(
        COMMAND brew --prefix flex
        RESULT_VARIABLE BREW_FLEX
        OUTPUT_VARIABLE BREW_FLEX_PREFIX
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (BREW_FLEX EQUAL 0 AND EXISTS "${BREW_FLEX_PREFIX}")
        message(STATUS "Found Flex keg installed by Homebrew at ${BREW_FLEX_PREFIX}")
        set(FLEX_EXECUTABLE "${BREW_FLEX_PREFIX}/bin/flex")
    endif ()
endif ()

find_package(BISON 3.0 REQUIRED)
find_package(FLEX 2.6.4 REQUIRED)
find_package(ZLIB 1.2.0 REQUIRED)
find_package(GLIB 2.44.0 REQUIRED COMPONENTS gio gio-unix gmodule gobject)
find_package(Python3 3.9.0 COMPONENTS Development)
find_package(Ncurses 5.0)
find_package(LibXml2 2.8.0)
find_package(OpenSSL 1.1.1)
find_package(LibGcrypt 1.6.0)
find_package(SQLite3 3.10.0)
find_package(MySQLClient 20.0.0)

PURC_OPTION_BEGIN()

# Mac always has DNSSD
set(ENABLE_DNSSD_DEFAULT ON)

set(ENABLE_EXTDVOBJ_FS_DEFAULT ON)
set(ENABLE_EXTDVOBJ_MATH_DEFAULT ON)

if (NOT Python3_Development_FOUND)
    set(ENABLE_EXTDVOBJ_PY_DEFAULT OFF)
else ()
    set(ENABLE_EXTDVOBJ_PY_DEFAULT ON)
endif ()

if (NOT SQLITE3_FOUND)
    set(ENABLE_SCHEMA_LSQL_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_SQLITE3 OFF)
    set(ENABLE_EXTDVOBJ_SQLITE_DEFAULT OFF)
else ()
    set(ENABLE_SCHEMA_LSQL_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_SQLITE3 ON)
    set(ENABLE_EXTDVOBJ_SQLITE_DEFAULT ON)
endif ()

if (NOT MYSQLCLIENT_FOUND)
    set(ENABLE_SCHEMA_RSQL_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_MYSQLCLIENT OFF)
else ()
    set(ENABLE_SCHEMA_RSQL_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_MYSQLCLIENT ON)
endif ()

if (NOT ENABLE_REMOTE_FETCHER_DEFAULT OR NOT ENABLE_REMOTE_FETCHER)
    set(ENABLE_SCHEMA_LSQL_DEFAULT OFF)
    set(ENABLE_SCHEMA_RSQL_DEFAULT OFF)
endif ()

if (NOT GLIB_FOUND)
    set(ENABLE_SOCKET_STREAM_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_GLIB OFF)
else ()
    set(ENABLE_SOCKET_STREAM_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_GLIB ON)
    if (PC_GLIB_VERSION VERSION_LESS 2.70)
        SET_AND_EXPOSE_TO_BUILD(HAVE_GLIB_LESS_2_70 ON)
    else ()
        SET_AND_EXPOSE_TO_BUILD(HAVE_GLIB_LESS_2_70 OFF)
    endif ()
endif ()

# GUri is available in GLib since version 2.66, but we only want to use it if version is >= 2.67.1.â†µ
if (PC_GLIB_VERSION VERSION_GREATER "2.67.1" OR PC_GLIB_VERSION STREQUAL "2.67.1")
    SET_AND_EXPOSE_TO_BUILD(HAVE_GURI 1)
endif ()

if (NOT Ncurses_FOUND)
    set(ENABLE_RENDERER_FOIL_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_NCURSES OFF)
else ()
    set(ENABLE_RENDERER_FOIL_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_NCURSES ON)
endif ()

if (NOT LIBXML2_FOUND)
    set(ENABLE_DOCTYPE_XML_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_LIBXML2 OFF)
else ()
    set(ENABLE_DOCTYPE_XML_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_LIBXML2 ON)
endif ()

if (NOT OPENSSL_FOUND)
    set(ENABLE_SSL_DEFAULT OFF)
    SET_AND_EXPOSE_TO_BUILD(HAVE_OPENSSL OFF)
else ()
    set(ENABLE_SSL_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_OPENSSL ON)
endif ()

if (USE_SOUP2)
    set(SOUP_MINIMUM_VERSION 2.54.0)
    set(SOUP_API_VERSION 2.4)
else ()
    set(SOUP_MINIMUM_VERSION 2.99.9)
    set(SOUP_API_VERSION 3.0)
    set(ENABLE_SERVER_PRECONNECT ON)
endif ()

find_package(LibSoup ${SOUP_MINIMUM_VERSION})

if (NOT LibSoup_FOUND)
    if (USE_SOUP2)
        message(FATAL_ERROR "libsoup is required.")
    else ()
        message(FATAL_ERROR "libsoup 3 is required. Enable USE_SOUP2 to use libsoup 2 (disables HTTP/2)")
    endif ()
endif ()


if (NOT LIBSOUP_FOUND OR NOT LIBGCRYPT_FOUND)
    set(ENABLE_REMOTE_FETCHER_DEFAULT OFF)
    if (NOT LIBSOUP_FOUND)
        SET_AND_EXPOSE_TO_BUILD(HAVE_LIBSOUP OFF)
    endif ()
    if (NOT LIBGCRYPT_FOUND)
        SET_AND_EXPOSE_TO_BUILD(HAVE_LIBGCRYPT OFF)
    endif ()
else ()
    set(ENABLE_REMOTE_FETCHER_DEFAULT ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_LIBSOUP ON)
    SET_AND_EXPOSE_TO_BUILD(HAVE_LIBGCRYPT ON)
endif ()


# Private options shared with other PurC ports. Add options here only if
# we need a value different from the default defined in PurCFeatures.cmake.
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_DNSSD PUBLIC ${ENABLE_DNSSD_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_EXTDVOBJ_MATH PUBLIC ${ENABLE_EXTDVOBJ_MATH_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_EXTDVOBJ_FS PUBLIC ${ENABLE_EXTDVOBJ_FS_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_EXTDVOBJ_PY PUBLIC ${ENABLE_EXTDVOBJ_PY_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_EXTDVOBJ_SQLITE PUBLIC ${ENABLE_EXTDVOBJ_SQLITE_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_SOCKET_STREAM PUBLIC ${ENABLE_SOCKET_STREAM_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_RENDERER_FOIL PUBLIC ${ENABLE_RENDERER_FOIL_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_DOCTYPE_XML PUBLIC ${ENABLE_DOCTYPE_XML_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_SSL PUBLIC ${ENABLE_SSL_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_REMOTE_FETCHER PUBLIC ${ENABLE_REMOTE_FETCHER_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_SCHEMA_LSQL PUBLIC ${ENABLE_SCHEMA_LSQL_DEFAULT})
PURC_OPTION_DEFAULT_PORT_VALUE(ENABLE_SCHEMA_RSQL PUBLIC ${ENABLE_SCHEMA_RSQL_DEFAULT})

PURC_OPTION_END()

set(PurC_PKGCONFIG_FILE ${CMAKE_BINARY_DIR}/Source/PurC/purc.pc)
set(CSSEng_PKGCONFIG_FILE ${CMAKE_BINARY_DIR}/Source/CSSEng/csseng.pc)
set(DOMRuler_PKGCONFIG_FILE ${CMAKE_BINARY_DIR}/Source/DOMRuler/domruler.pc)
set(RemoteFetcher_PKGCONFIG_FILE ${CMAKE_BINARY_DIR}/Source/RemoteFetcher/remote_fetcher.pc)

set(PurC_LIBRARY_TYPE SHARED)
set(CSSEng_LIBRARY_TYPE SHARED)
set(DOMRuler_LIBRARY_TYPE SHARED)
set(RemoteFetcher_LIBRARY_TYPE SHARED)
set(PurCTestSupport_LIBRARY_TYPE SHARED)

