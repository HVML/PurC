#!/usr/bin/purc

<!DOCTYPE hvml SYSTEM "v: MATH">
<hvml target="void">
    <head>
    </head>

    <body id="main">
        <inherit>
            $RUNNER.user!( 'primes', [] )
            $RUNNER.user!( 'chans', [] )
        </inherit>

        <init as count at "_root" with 10L />
        <init as chIn at "_root" with {{ $RUNNER.chan!( "natural" ) && $RUNNER.chan( "natural" ) }} />

        <load from "#initialNumbers" with { chanName: 'natural', diff: 1L } onto "inherit:" async />

        <iterate on 0L onlyif $L.lt($0<, $count) with $DATA.arith('+', $0<, 1) nosetotail >

            <choose on $chIn.recv() >
                <update on $RUNNER.myObj.primes to "append" with $? />
                <update on $RUNNER.myObj.chans to "append" with "filter$?" />

                <!-- open a channel to filter the new prime -->
                <init as chOut at "_root" with {{ $RUNNER.chan!( "filter$?" ) && $RUNNER.chan( "filter$?" ) }} />

                <load from "#sieve" with { 'in': $chIn, "out": $chOut, 'prime': $? } onto "inherit:" async />

                <!-- make the output channel to be the input channel -->
                <init as chIn at "_root" with $chOut />
            </choose>

        </iterate>

        <!--
        <!-- close the channel named `natural` -->
        <init as chIn at "_root" with $RUNNER.chan!( "natural", 0 ) />

        <iterate on $RUNNER.myObj.chans >
            <inherit>
                $RUNNER.chan!( "$?", 0 )
            </inherit>
        </iterate>
        -->

        <exit with $DATA.count($RUNNER.myObj.primes) />
    </body>

    <!-- request: {chanName: <string: `the channel name`>, diff: <longint: `the difference`> } -->
    <body id="initialNumbers">
        <!-- open the channel -->
        <init as "naturalChan" at "_root" with $RUNNER.chan( $REQ.chanName ) />

        <!-- this iteration will stop only if the the channle was closed -->
        <iterate on 2L onlyif $naturalChan.send($0<) with $DATA.arith('+', $0<, $REQ.diff) nosetotail silently >
        </iterate>
    </body>

    <body id="sieve">
        <!-- this iteration will stop only if the the input channle was closed -->
        <iterate with $REQ.in.recv() silently must-yield>
            <inherit>
                {{
                    $DATA.isdivisible($?, $REQ.prime)
                    ||
                    $REQ.out.send($?)
                }}
            </inherit>
            <catch for `EntityGone`>
                <inherit>
                    $STREAM.stdout.writelines("Catch EntityGone")
                </inherit>
            </catch>
        </iterate>
    </body>
</hvml>

