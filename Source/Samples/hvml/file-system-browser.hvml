<!DOCTYPE hvml SYSTEM 'f: MATH FS'>
<hvml target="html">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <title>HVML File System Browser</title>

        <!-- import the Bootstrap assets built in the renderer -->
        <link rel="stylesheet" href="//localhost/_renderer/_builtin/-/assets/bootstrap-5.3.1-dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//localhost/_renderer/_builtin/-/assets/bootstrap-icons-1.10.5/font/bootstrap-icons.css" />
        <style hvml:raw>
            .scrollarea {
                overflow-y: scroll;
            }

          .f-bg-left {
                background-color: #d1d1d1;
          }

          .f-txt-overflow {
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
          }

          div.dir-entry:nth-child(odd) {
              color: #000;
              background-color: #ced4da;
          }

          div.dir-entry:nth-child(even) {
              color: #000;
              background-color: #adb5bd;
          }
        </style>
    </head>

    <body id="main">

        <init as 'dataCenter' silently >
            {
                "currDir": {{ $REQ.dir || $SYS.cwd }},
                "dirList" : [],
                "fileList" : [],
            }
        </init>

        <define as makeDirObject>
            <test with $L.and($STR.contains($?.stat.mode_alphas, 'r'), $STR.contains($?.stat.mode_alphas, 'x')) >
                <init as access at '2' with true temp />
                <init as iconColor at '2' with 'text-primary' temp />
                <differ>
                    <init as access at '3' with false temp />
                    <init as iconColor at '3' with 'text-secondary' temp />
                </differ>
            </test>

            <return with { name: $?.name, sizeText: "$?.stat.nlink Items", access: true, iconColor: $iconColor,
                timeText: $DATETIME.fmttime("%Y-%m-%d %H:%M", $?.stat.mtime_sec) } />
        </define>

        <define as getFileType>
            <test on $STR.substr($?, -4) >
                <match for="AS '.pdf'" exclusively>
                    <return with "bi-file-earmark-pdf" />
                </match>
                <match for="AS '.jpg'" exclusively>
                    <return with "bi-file-earmark-image" />
                </match>
                <match for="AS '.jpeg'" exclusively>
                    <return with "bi-file-earmark-image" />
                </match>
                <match for="AS '.png'" exclusively>
                    <return with "bi-file-earmark-image" />
                </match>
                <match for="AS '.gif'" exclusively>
                    <return with "bi-file-earmark-image" />
                </match>
                <match for="AS '.mp3'" exclusively>
                    <return with "bi-file-earmark-music" />
                </match>
                <match for="AS '.txt'" exclusively>
                    <return with "bi-file-earmark-text" />
                </match>
                <match for="ANY">
                    <return with "bi-file-earmark" />
                </match>
            </test>
        </define>

        <define as getFileSize>
            <test on $?>
                <match for 'GE 1073741824' exclusively>
                    <return with "$MATH.div($MATH.ceil_l($MATH.mul($MATH.div($3?, 1073741824L), 100)), 100) GB" />
                </match>
                <match for 'GE 1048576' exclusively>
                    <return with "$MATH.div($MATH.ceil_l($MATH.mul($MATH.div($3?, 1048576L), 100)), 100) MB" />
                </match>
                <match for 'GE 1024' exclusively>
                    <return with "$MATH.div($MATH.ceil_l($MATH.mul($MATH.div($3?, 1024L), 100)), 100) KB" />
                </match>
                <match for 'ANY' exclusively>
                    <return with "$3? Bytes" />
                </match>
            </test>
        </define>

        <define as makeFileObject >

            <call on $getFileType with $?.name >
                <init as typeClass at '2' with $? temp />
            </call>

            <call on $getFileSize with $?.stat.size >
                <init as sizeText at '2' with $? temp />
            </call>

            <test with $STR.contains($?.stat.mode_alphas, 'r') >
                <init as access at '2' with true temp />
                <differ>
                    <init as access at '3' with false temp />
                </differ>
            </test>

            <return with { name: $?.name, typeClass: $typeClass, sizeText: $sizeText, access: $access, iconColor: 'text-primary',
                timeText: $DATETIME.fmttime("%Y-%m-%d %H:%M", $?.stat.mtime_sec) } />

        </define>

        <choose on $FS.opendir($dataCenter.currDir) idd-by 'myAnchor'>
            <init as totalEntries with 0 temp />

            <iterate onlyif $L.lt($totalEntries, 256) with $?.read() >
                <init as fullPathName with $STR.join($dataCenter.currDir, '/', $?) temp />

                <choose on $FS.stat($fullPathName, 'type mode_alphas nlink size mtime') >
                    <test with $DATA.isequal($?.type, 'd') >
                        <call on $makeDirObject with { name: $3?, stat: $2? } >
                            <update on $dataCenter.dirList to 'append' with $? />
                        </call>

                        <differ>
                            <call on $makeFileObject with { name: $4?, stat: $3? } >
                                <update on $dataCenter.fileList to 'append' with $? />
                            </call>
                        </differ>
                    </test>
                </choose>

                <init as totalEntries at '2' with ($totalEntries + 1) temp />
            </iterate>
        </choose>

        <sort on $dataCenter.dirList against 'name' />
        <sort on $dataCenter.fileList against 'name' />

        <archetype name="dirItem">
            <div class="row dir-entry">
                <div class="col-sm-7 subdir" id="$?.name" hvml-events="click"><i class="bi bi-folder pe-none me-2 $?.iconColor"></i> $?.name</div>
                <div class="col-sm-2 text-right">$?.sizeText</div>
                <div class="col-sm-3 text-right">$?.timeText</div>
            </div>
        </archetype>

        <archetype name="fileItem">
            <div class="row dir-entry">
                <div class="col-sm-7"><i class="bi $?.typeClass pe-none me-2 $?.iconColor"></i> $?.name</div>
                <div class="col-sm-2 text-right">$?.sizeText</div>
                <div class="col-sm-3 text-right">$?.timeText</div>
            </div>
        </archetype>

        <main class="d-flex flex-column flex-nowrap h-100">
            <div class="row ps-3 pe-3">
                <a lass="d-flex align-items-center flex-shrink-0 p-3 link-dark text-decoration-none border-bottom">
                    <div class="d-flex align-items-center fs-3 ps-2 pt-4 pb-2 w-100 text-secondary-emphasis  fw-bolder" id="mainHeadTitleContainer">
                        <div class="ps-3 f-txt-overflow text-center" id="mainHeadTitle">$dataCenter.currDir</div>
                    </div>
                    <hr/>
                </a>
            </div>

            <div class="row ps-3 scrollarea" id="mainList">
                <div class="container-fluid">
                    <iterate on $dataCenter.dirList>
                        <!-- inherit>
                            $STREAM.stdout.writelines("got a directry entry: $?.name")
                        </inherit -->

                        <update on $@ to 'append' with $dirItem />
                    </iterate>

                    <iterate on $dataCenter.fileList>
                        <!-- inherit>
                            $STREAM.stdout.writelines("got a directry entry: $?.name")
                        </inherit -->

                        <update on $@ to 'append' with $fileItem />
                    </iterate>
                </div>
            </div>
        </main>

        <test with $L.streq('caseless', $RDR.state.comm, 'socket') >
            <observe on $CRTN for "rdrState:pageClosed">
                <inherit>
                    $STREAM.stdout.writelines("pageClosed")
                </inherit>
                <exit with "closed" />
            </observe>

            <observe on $CRTN for "rdrState:pageSuppressed">
                <inherit>
                    $STREAM.stdout.writelines("pageSuppressed")
                </inherit>

                <exit with "suppressed" />
            </observe>

            <observe on ".subdir" for "click">
                <test on $?.targetId >
                    <match for "AS '.'" exclusively>
                        <init as dirName at '3' with '' temp />
                    </match>
                    <match for "AS '..'" exclusively>
                        <inherit>
                            $STREAM.stdout.writelines("currDir: $dataCenter.currDir")
                        </inherit>
                        <test with $DATA.isequal($dataCenter.currDir, '/') >
                            <differ>
                                <update on $dataCenter at '.currDir' with $FS.dirname($dataCenter.currDir) />
                            </differ>
                        </test>

                        <inherit>
                            $STREAM.stdout.writelines("currDir: $dataCenter.currDir")
                        </inherit>
                        <init as dirName at '3' with '' temp />
                    </match>
                    <match for 'ANY'>
                        <init as dirName at '3' with $3?.targetId temp />
                    </match>
                </test>

                <test with $STR.ends_with($dataCenter.currDir, '/') >
                    <init as 'fullPath' at '2' with $STR.join($dataCenter.currDir, $dirName) />
                    <differ>
                        <init as 'fullPath' at '3' with $STR.join($dataCenter.currDir, '/', $dirName) />
                    </differ>
                </test>

                <test with $STR.ends_with($fullPath, '/') >
                </test>

                <inherit>
                    $STREAM.stdout.writelines("full path: $fullPath")
                </inherit>

                <load from '#main' onto 'self:' with { dir: $fullPath } async />
            </observe>

        </test>
    </body>

</hvml>
